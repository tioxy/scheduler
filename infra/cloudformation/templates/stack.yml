AWSTemplateFormatVersion: '2010-09-09'
Description: Setup Kubernetes cluster infrastructure to deploy tioxy/scheduler
Parameters:
  VPCCIDR:
    Description: CIDR block
    Type: String
    Default: 10.56.0.0/16
  PublicSubnetCIDR:
    Description: Public Subnet CIDR block
    Type: String
    Default: 10.56.0.0/24
    ConstraintDescription: Must match VPC range
  PrivateSubnetCIDR:
    Description: Private Subnet CIDR block
    Type: String
    Default: 10.56.1.0/24
    ConstraintDescription: Must match VPC range
  MasterInstanceSize:
    Description: Kubernetes Master instance size
    Type: String
    Default: t3.medium
  NodeInstanceSize:
    Description: Kubernetes Node instance size
    Type: String
    Default: t3.medium
  KeyPairName:
    Description: EC2 Key Pair name used to create instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: se-devops-test
  InstanceAMI:
    Description: Kubernetes Base AMI generated by Packer
    Type: AWS::EC2::Image::Id
  KubeadmJoinToken:
    Description: One year kubeadm join token
    Type: String
    Default: token1.tokentokentoken1
  KubernetesClusterName:
    Description: Cluster name used in multiple resources
    Type: String
    Default: kubernetes-scheduler

Resources:
  #
  # EC2 IAM Role for Kubernetes Nodes
  #
  BaseInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref KubernetesNodeRole
  KubernetesNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
  #
  # cluster-autoscaler IAM Policy to provision new instances when Pods can't be scheduled 
  # (https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler/cloudprovider/aws#attach-iam-policy-to-nodegroup)
  #
  ClusterAutoscalerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: kubernetes-cluster-autoscaler
      Roles:
        - !Ref KubernetesNodeRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeTags"
              - "autoscaling:SetDesiredCapacity"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
            Resource: "*"

  KubernetesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: kubernetes
      Roles:
        - !Ref KubernetesNodeRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "ec2:*"
              - "elasticloadbalancing:*"
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:GetRepositoryPolicy"
              - "ecr:DescribeRepositories"
              - "ecr:ListImages"
              - "ecr:BatchGetImage"
              - "autoscaling:DescribeAutoScalingGroup"
              - "autoscaling:UpdateAutoScalingGroup"
            Resource: "*"
  #
  # VPC
  #
  KubernetesVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: VPC
          Value: kubernetes-vpc
        - Key: Name
          Value: kubernetes-vpc

  #
  # IGW (Internet Gateway)
  #
  KubernetesInternetGateway:
    Type: AWS::EC2::InternetGateway
  KubernetesAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref KubernetesVPC
      InternetGatewayId: !Ref KubernetesInternetGateway

  #
  # One pair of Subnets (public/private)
  #
  KubernetesPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref KubernetesVPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub kubernetes-vpc.public-${AWS::Region}a
  KubernetesPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref KubernetesVPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub kubernetes-vpc.private-${AWS::Region}a

  #
  # NAT Gateway
  #
  KubernetesNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
       AllocationId: !GetAtt KubernetesNATGatewayEIP.AllocationId
       SubnetId: !Ref KubernetesPublicSubnet
       Tags:
          - Key: Name
            Value: !Sub kubernetes-vpc.nat-${AWS::Region}a
  KubernetesNATGatewayEIP:
   DependsOn: KubernetesAttachGateway
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc

  #
  # Route Tables
  #
  KubernetesPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref KubernetesVPC
      Tags:
      - Key: Name
        Value: kubernetes-vpc.public
  KubernetesPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref KubernetesVPC
      Tags:
      - Key: Name
        Value: kubernetes-vpc.private

  KubernetesPublicRouteTableRouteIGW:
    Type: AWS::EC2::Route
    Properties:
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref KubernetesInternetGateway
       RouteTableId: !Ref KubernetesPublicRouteTable
  KubernetesPrivateRouteTableRouteNAT:
    Type: AWS::EC2::Route
    Properties:
       DestinationCidrBlock: 0.0.0.0/0
       NatGatewayId: !Ref KubernetesNATGateway
       RouteTableId: !Ref KubernetesPrivateRouteTable


  KubernetesPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref KubernetesPublicSubnet
      RouteTableId: !Ref KubernetesPublicRouteTable
  KubernetesPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref KubernetesPrivateSubnet
      RouteTableId: !Ref KubernetesPrivateRouteTable

  #
  # EC2
  #
  KubernetesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Kubernetes required rules to communicate nodes
      VpcId: !Ref KubernetesVPC
      SecurityGroupEgress:
      - Description: Anywhere
        CidrIp: "0.0.0.0/0"
        IpProtocol: "-1"
        FromPort: 0
        ToPort: 65535 
      SecurityGroupIngress:
      - Description: VPC All Traffic
        CidrIp: !Ref VPCCIDR
        IpProtocol: "-1"
        FromPort: 0
        ToPort: 65535 
      Tags:
      - Key: Name
        Value: kubernetes-node

  KubernetesMasterEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  KubernetesMasterEIPAttach:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt KubernetesMasterEIP.AllocationId
      InstanceId: !Ref KubernetesMaster

  KubernetesMaster:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CreditSpecification:
        CPUCredits: standard
      IamInstanceProfile: !Ref BaseInstanceProfile
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref MasterInstanceSize
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
      - !GetAtt KubernetesSecurityGroup.GroupId
      SubnetId: !Ref KubernetesPublicSubnet
      Tags:
      - Key: Name
        Value: !Sub ${KubernetesClusterName}-master
      - Key: !Sub kubernetes.io/cluster/${KubernetesClusterName}
        Value: owned
      UserData:
        Fn::Base64:
          !Sub |
            #cloud-config
            write_files:
            - path: /opt/kubeadm-master.yml
              content: |
                ---
                apiVersion: kubeadm.k8s.io/v1beta1
                kind: ClusterConfiguration
                apiServer:
                  extraArgs:
                    cloud-provider: aws
                clusterName: ${KubernetesClusterName}
                controllerManager:
                  extraArgs:
                    cloud-provider: aws
                    configure-cloud-routes: "false"
                    address: 0.0.0.0
                kubernetesVersion: v1.14.1
                networking:
                  dnsDomain: cluster.local
                  podSubnet: 192.168.0.0/16
                  serviceSubnet: 10.96.0.0/12
                scheduler:
                  extraArgs:
                    address: 0.0.0.0
                ---
                apiVersion: kubeadm.k8s.io/v1beta1
                kind: InitConfiguration
                nodeRegistration:
                  kubeletExtraArgs:
                    cloud-provider: aws
            - path: /opt/helm-rbac.yml
              content: |
                ---
                apiVersion: v1
                kind: ServiceAccount
                metadata:
                  name: tiller
                  namespace: kube-system
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata:
                  name: tiller
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: cluster-admin
                subjects:
                  - kind: ServiceAccount
                    name: tiller
                    namespace: kube-system
            runcmd:
            - sleep 3m
            - hostnamectl set-hostname $(hostname --fqdn)
            - kubeadm config images pull
            - kubeadm init --config /opt/kubeadm-master.yml
            - kubeadm token create ${KubeadmJoinToken} --ttl 8760h
            - mkdir -p /home/admin/.kube/
            - cp -i /etc/kubernetes/admin.conf /home/admin/.kube/config
            - chown -R admin:admin /home/admin/.kube/
            - KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
            - KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
            - KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/storage-class/aws/default.yaml
            - KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f /opt/helm-rbac.yml
            - KUBECONFIG=/etc/kubernetes/admin.conf helm init --service-account tiller --history-max 200 --wait
            - KUBECONFIG=/etc/kubernetes/admin.conf helm upgrade --install cluster-autoscaler stable/cluster-autoscaler --set autoDiscovery.clusterName=${KubernetesClusterName} --set awsRegion=${AWS::Region} --set rbac.create=true --namespace kube-system

  #
  # ASG & Launch Configuration
  #
  KubernetesLaunchConfiguration:
    DependsOn: KubernetesMaster
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref BaseInstanceProfile
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref NodeInstanceSize
      KeyName: !Ref KeyPairName
      SecurityGroups:
      - !GetAtt KubernetesSecurityGroup.GroupId
      UserData:
        Fn::Base64:
          !Sub |
            #cloud-config
            write_files:
            - path: /opt/kubeadm-join.yml
              content: |
                apiVersion: kubeadm.k8s.io/v1beta1
                kind: JoinConfiguration
                discovery:
                  tlsBootstrapToken: ${KubeadmJoinToken}
                  timeout: 5m0s
                  bootstrapToken:
                    apiServerEndpoint: ${KubernetesMaster.PrivateIp}:6443
                    token: ${KubeadmJoinToken}
                    unsafeSkipCAVerification: true
                nodeRegistration:
                  kubeletExtraArgs:
                    cloud-provider: aws
            runcmd:
            - sleep 30s
            - hostnamectl set-hostname $(hostname --fqdn)
            - kubeadm join --config /opt/kubeadm-join.yml

  KubernetesNodeAutoScaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref KubernetesLaunchConfiguration
      MinSize: "1"
      MaxSize: "10"
      Tags:
      - Key: Name
        Value: !Sub ${KubernetesClusterName}-node
        PropagateAtLaunch: true
      - Key: !Sub kubernetes.io/cluster/${KubernetesClusterName}
        Value: owned
        PropagateAtLaunch: true
      - Key: k8s.io/cluster-autoscaler/enabled
        Value: owned
        PropagateAtLaunch: true
      - Key: !Sub k8s.io/cluster-autoscaler/${KubernetesClusterName}
        Value: owned
        PropagateAtLaunch: true
      VPCZoneIdentifier:
      - !Ref KubernetesPrivateSubnet
